{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 var s2 = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED"),\
    geometry = ee.FeatureCollection('TIGER/2016/Counties')\
  .filter(ee.Filter.eq('NAME', 'Fresno')),\
    wc = ee.ImageCollection("ESA/WorldCover/v200");\
\
// Flatten the image collection to extract date as a column\
var s2_date = s2.map(function(image) \{\
  var date = ee.Date(image.get('system:time_start')).format('yyyyMMdd');\
  var formattedDate = ee.Number.parse(date);\
  var dateBand = ee.Image.constant(formattedDate.multiply(ee.Number(10000))).rename('Date_RS').toFloat();\
  return image.addBands(dateBand);\
\});\
\
// Get image\
var image = s2_date.filterDate('2021-10-01', '2024-03-31')\
  .filterBounds(geometry)\
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 5))\
  .map(cloudMask)\
  .median()\
  .clip(geometry)\
  .multiply(0.0001)\
  .toFloat();\
\
// Show image\
Map.addLayer(image, \{ min: 0, max: 0.2, bands: ['B4', 'B3', 'B2']\}, 'Image S2');\
\
// Generate NDVI, NDBI, and NDWI\
var bandMap = \{ RED: image.select('B4'), NIR: image.select('B8'), SWIR: image.select('B11'), GREEN: image.select('B3')  \};\
var ndvi = image.expression('(NIR - RED) / (NIR + RED)', bandMap).rename('NDVI').toFloat();\
var gndvi = image.expression('(NIR - GREEN) / (NIR + GREEN)', bandMap).rename('GNDVI').toFloat();\
var ndwi = image.expression('(NIR - SWIR) / (NIR + SWIR)', bandMap).rename('NDWI').toFloat();\
\
\
// LULC for stratified sampling\
var lc = wc.first().rename('LULC');\
\
\
// Add indices and lulc band to main image\
image = image.addBands([ndvi, gndvi, ndwi, lc]);\
image = image.addBands(ee.Image.pixelLonLat()).reduceRegion(\{\
  reducer: ee.Reducer.toList(), \
  geometry: geometry, \
  scale: 500\})\
\
\
// Cloud mask function\
function cloudMask(image)\{\
  var mask = image.select('QA60').bitwiseAnd(1 << 10).eq(0); // Mask clouds (QA60 band, Bit 10)\
  return image.select(['B2', 'B3', 'B4', 'B8', 'B11', 'Date_RS']).updateMask(mask);\
\}\
\
// Add more layers to map\
var ndviParams = \{min: -1, max: 1, palette: ['blue', 'yellow', 'green']\};\
Map.addLayer(ndvi, ndviParams, 'NDVI image');\
var gndviParams = \{min: -1, max: 1, palette: ['blue', 'orange', 'green']\};\
Map.addLayer(gndvi, gndviParams, 'GNDVI image');\
var ndwiParams = \{min: -1, max: 1, palette: ['blue', 'pink', 'green']\};\
Map.addLayer(ndwi, ndwiParams, 'NDMI image');\
\
\
var bandNames = image.keys()\
\
print(bandNames)\
\
// List of pixels, containing a list of band values\
var pixels = ee.Array(image.values()).transpose().toList() \
var table = ee.FeatureCollection(\
  pixels.map(function (bandValues) \{\
    // Dictionary with bands for keys and valueband value for value\
    var properties = ee.Dictionary.fromLists(\
      bandNames, ee.Array(bandValues).toList()\
    )\
    // Set to null if you just want longitude and latitude as columns\
    var geometry = ee.Geometry.Point(\
      properties.getNumber('longitude'),\
      properties.getNumber('latitude')\
    )\
    return ee.Feature(geometry, properties)\
  \})  \
)\
print(table.limit(100))\
\
Export.table.toDrive(\{\
  collection: table, \
  description: 'fresno_data', \
  // Columns to include. Add longitude and latitude if you want\
  selectors: ['Date_RS','longitude','latitude','B2', 'B3', 'B4', 'B8', 'B11', 'NDVI', 'GNDVI', 'NDWI', 'LULC'] \
\})\
}